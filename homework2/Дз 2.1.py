def countSquares(matrix):
    dp = [[0] * len(matrix[0]) for _ in range(len(matrix))]
    res = 0 # переменная считает конечное количествово матриц
    for i in range(len(matrix)): # проходимся по матрице
        for j in range(len(matrix[0])):
            if i == 0 or j == 0: # заполняем первую строку и столбец значениями из матрицы
                dp[i][j] = matrix[i][j]
                if dp[i][j] == 1:
                    res += 1
            else:
                if matrix[i][j]: # если в данной ячейке стоит 1
                    dp[i][j] = min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) + 1
                    res += dp[i][j] # прибавляем полученное значение к результату
    return res

#для решение данной задачи нужно использовать диманическое программирование
#нам нужем список, чтобы в нем хранились предыдущие результаты вычисления всего набора квадратов
#грубо говоря нам нужно найти сколько квадратов может быть получено в матрице [i] [j]
#сложность O(n^2)